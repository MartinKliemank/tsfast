#AUTOGENERATED! DO NOT EDIT! File to edit: dev/02_learner.ipynb (unless otherwise specified).

__all__ = ['SkipFirstNCallback', 'VarySeqLen', 'TimeSeriesRegularizer', 'ARInitCB', 'SkipNLoss', 'fun_rmse',
           'norm_rmse', 'mean_vaf', 'get_inp_out_size', 'RNNLearner', 'TCNLearner', 'AR_TCNLearner', 'AR_RNNLearner']

#Cell
from .core import *
from .model import *
from fastai2.basics import *
from fastai2.callback.progress import *
from fastai2.callback.tracker import *

#Cell
class SkipFirstNCallback(Callback):
    "`Callback` skips first n samples from prediction and target, optionally `with_loss`"
    def __init__(self, n_skip = 0):
        self.n_skip = n_skip

    def after_pred(self):
        self.learn.pred = self.pred[:,self.n_skip:]
#         import pdb; pdb.set_trace()
        if isinstance(self.yb, tuple):
            self.learn.yb = tuple([y[:,self.n_skip:] for y in self.yb])
        else:
            self.learn.yb = self.yb[:,self.n_skip:]


#Cell
class VarySeqLen(Callback):
    "`Callback` varies sequence length of every mini batch"
    def __init__(self, min_len = 50):
        self.min_len = min_len

    def begin_batch(self):
#         import pdb; pdb.set_trace()
        lx = self.xb[0].shape[1]
        ly = self.yb[0].shape[1]
        lim = random.randint(self.min_len,ly)
#         import pdb; pdb.set_trace()
        if ly < lx:
            self.learn.xb = tuple([x[:,:-(ly-lim)] for x in self.xb])
        else:
            self.learn.xb = tuple([x[:,:lim] for x in self.xb])

        self.learn.yb = tuple([y[:,:lim] for y in self.yb])

#Cell
from fastai2.callback.hook import *
@delegates()
class TimeSeriesRegularizer(HookCallback):
    "Callback that adds AR and TAR to the loss, calculated by output of provided layer"
    run_before=TrainEvalCallback
    def __init__(self,alpha=0.0, beta=0.0,dim = None,detach=False, **kwargs):
        super().__init__(detach=detach,**kwargs)
        store_attr(self,'alpha,beta,dim')

    def hook(self, m, i, o):
#         import pdb; pdb.set_trace()
        if type(o) is torch.Tensor:
            self.out = o
        else:
            self.out = o[0]

        #find time axis if not already provided
        if self.dim is None:
            self.dim = np.argmax([0,self.out.shape[1],self.out.shape[2]])

    def after_loss(self):
        if not self.training: return

        h = self.out.float()

        if self.alpha != 0.:
            l_a = float(self.alpha) * h.pow(2).mean()
            self.learn.loss += l_a

        if self.beta != 0. and h.shape[self.dim]>1:
            h_diff = (h[:,1:] - h[:,:-1]) if self.dim == 1 else (h[:,:,1:] - h[:,:,:-1])
            l_b = float(self.beta) * h_diff.pow(2).mean()
            self.learn.loss += l_b

#Cell
class ARInitCB(Callback):
    '''Adds the target variable to the input tuple for autoregression'''
    def begin_batch(self):
#         import pdb; pdb.set_trace()
        self.learn.xb = tuple([*self.xb,*self.yb])

#Cell
def SkipNLoss(fn,n_skip=0):
    '''Loss-Function modifier that skips the first n samples of sequential data'''
    def _inner( input, target):
        return fn(input[:,n_skip:],target[:,n_skip:])

    #checking if fn has the attribute name leads sometimes to false -> try_catch instead
    try:
        _inner.__name__ = fn.__name__
    except:
        pass

    return _inner

#Cell
def fun_rmse(inp, targ):
    '''rmse loss function defined as a function not as a AccumMetric'''
    return torch.sqrt(F.mse_loss(inp, targ))

#Cell
def norm_rmse(inp, targ):
    '''rmse loss function defined as a function not as a AccumMetric'''
    return fun_rmse(inp, targ)*100

#Cell
def mean_vaf(inp,targ):
    return (1-((targ-inp).var()/targ.var()))*100

#Cell
def get_inp_out_size(db):
    '''returns input and output size of a timeseries databunch'''
    tup = db.one_batch()
    inp = tup[0].shape[-1]
    out = tup[1].shape[-1]
    return inp,out

#Cell
@delegates(SimpleRNN, keep=True)
def RNNLearner(db,loss_func=nn.MSELoss(),metrics=[fun_rmse],n_skip=0,cbs=None,**kwargs):
    inp,out = get_inp_out_size(db)
    model = SimpleRNN(inp,out,**kwargs)

    skip = partial(SkipNLoss,n_skip=n_skip)

    metrics= [skip(f) for f in metrics]
    loss_func = skip(loss_func)

    lrn = Learner(db,model,loss_func=loss_func,opt_func=ranger,metrics=metrics,cbs=cbs)
    return lrn

#Cell
@delegates(TCN, keep=True)
def TCNLearner(db,hl_depth=3,alpha=1,beta=1,early_stop=0,metrics=None,n_skip=None,**kwargs):
    n_skip = 2**hl_depth if n_skip is None else n_skip
    skip = partial(SkipNLoss,n_skip=n_skip)

    inp,out = get_inp_out_size(db)
    model = TCN(inp,out,hl_depth,**kwargs)

    cbs=[TimeSeriesRegularizer(alpha=alpha,beta=beta,modules=[model.conv_layers[-1]]),SaveModelCallback()]
    if early_stop > 0:
        cbs += [EarlyStoppingCallback(patience=early_stop)]

    if metrics is None: metrics=SkipNLoss(fun_rmse,n_skip)

    lrn = Learner(db,model,loss_func=skip(nn.MSELoss()),opt_func=ranger,metrics=metrics,cbs=cbs)
    return lrn

#Cell
@delegates(TCN, keep=True)
def AR_TCNLearner(db,hl_depth=3,alpha=1,beta=1,early_stop=0,metrics=None,n_skip=None,**kwargs):
    n_skip = 2**hl_depth if n_skip is None else n_skip
    skip = partial(SkipNLoss,n_skip=n_skip)

    inp,out = get_inp_out_size(db)
    model = AR_Model(TCN(inp+out,out,hl_depth,**kwargs),ar=False,rf=n_skip)
    model.init_normalize(db.one_batch())

    cbs=[ARInitCB(),TimeSeriesRegularizer(alpha=alpha,beta=beta,modules=[model.model.conv_layers[-1]]),SaveModelCallback()]
    if early_stop > 0:
        cbs += [EarlyStoppingCallback(patience=early_stop)]

    if metrics is None: metrics=SkipNLoss(fun_rmse,n_skip)

    lrn = Learner(db,model,loss_func=nn.MSELoss(),opt_func=ranger,metrics=metrics,cbs=cbs)
    return lrn

#Cell
@delegates(AR_RNN, keep=True)
def AR_RNNLearner(db,alpha=0,beta=0,early_stop=0,metrics=None,n_skip=0,fname='model',**kwargs):
    skip = partial(SkipNLoss,n_skip=n_skip)

    inp,out = get_inp_out_size(db)
    model = AR_Model(AR_RNN(inp+out,out,**kwargs),ar=False,hs=True)
    model.init_normalize(db.one_batch())

    cbs=[ARInitCB(),TimeSeriesRegularizer(alpha=alpha,beta=beta,modules=[model.model.rnn]),SaveModelCallback()]
    if early_stop > 0:
        cbs += [EarlyStoppingCallback(patience=early_stop)]

    if metrics is None: metrics=SkipNLoss(fun_rmse,n_skip)

    lrn = Learner(db,model,loss_func=nn.MSELoss(),opt_func=ranger,metrics=metrics,cbs=cbs)
    return lrn