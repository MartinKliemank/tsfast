# AUTOGENERATED! DO NOT EDIT! File to edit: 11_dualrnn.ipynb (unless otherwise specified).

__all__ = ['Diag_RNN', 'Diag_RNN_raw', 'NarProg', 'NarProgCallback', 'NarProgCallback_variable_init', 'ProDiagTrainer',
           'DualRNN', 'DualCRNN']

# Cell
from .core import *
from .models.core import *
from .learner import *
from .dataloaders import *
from fastai.basics import *
from fastai.callback.progress import *
from fastai.callback.schedule import *

# Cell
class Diag_RNN(nn.Module):

    @delegates(RNN, keep=True)
    def __init__(self,input_size,output_size,output_layer=1,hidden_size=100,
                 rnn_layer=1,linear_layer = 1,stateful=True,**kwargs):
        super().__init__()
        self.output_size = output_size

        self.rnn = RNN(input_size,hidden_size,rnn_layer,stateful=stateful,ret_full_hidden=False,**kwargs)
        self.final = SeqLinear(hidden_size,int(output_size*output_layer),hidden_layer=linear_layer-1)

    def forward(self, x,init_state = None):
        out,hidden = self.rnn(x,init_state)
        out = self.final(out)
        out = torch.stack(torch.split(out, split_size_or_sections = self.output_size,dim = -1),0)
        return out,hidden

    def output_to_hidden(self, out, idx):
        hidden = list(out[:,None,:,idx])
#         hidden = torch.split(out[:,:,idx],split_size_or_sections=1,dim = 0)
        hidden = [ h.contiguous() for h in hidden]
        return hidden

    def _get_hidden(self,bs):
        return self.rnn._get_hidden(bs)

# Cell
class Diag_RNN_raw(nn.Module):

    def __init__(self,input_size,output_size,output_layer=1,hidden_size=100,
                 rnn_layer=1,linear_layer = 1,stateful=True):
        super().__init__()

        self.rnn = RNN(input_size,output_size,output_layer,stateful=stateful,ret_full_hidden=True)

    def forward(self, x,init_state = None):

        out,_ = self.rnn(x,init_state)
        return out

# Cell
class NarProg(nn.Module):

    @delegates(RNN, keep=True)
    def __init__(self,prog_input_size,diag_input_size,output_size,init_sz=100,hidden_size=100,
                 rnn_layer=1,linear_layer = 1,**kwargs):
        super().__init__()
        store_attr('prog_input_size,diag_input_size,init_sz')

        rnn_kwargs = dict(hidden_size=hidden_size,num_layers=rnn_layer,stateful=True,ret_full_hidden=True)
        rnn_kwargs = dict(rnn_kwargs, **kwargs)

        self.rnn_diagnosis = Diag_RNN(diag_input_size,output_size=hidden_size,hidden_size=hidden_size,output_layer=rnn_layer,rnn_layer=rnn_layer,**kwargs)
#         self.rnn_diagnosis = Diag_RNN_raw(diag_input_size,hidden_size,num_layers=rnn_layer,ret_full_hidden=True,stateful=True)
        self.rnn_prognosis = RNN(prog_input_size,**rnn_kwargs)

#        self.final = SeqLinear(int(hidden_size*rnn_layer),output_size,hidden_layer=0)
        self.final = SeqLinear(hidden_size,output_size,hidden_layer=0)

        self.reset_state()

    def merge_states_masked(self,h_res,h_no_res,h_init, mask):
        hidden = []
        for res,no_res,init in zip(h_res,h_no_res,h_init):
            h = torch.zeros_like(init)
            h[:,mask] = res
            h[:,~mask] = no_res
            hidden.append(h)
        return hidden

    def forward(self, x,init_state = None):
        bs = x.shape[0]
        if init_state is None: init_state = self._get_hidden(bs)
        x_diag = x[...,:self.diag_input_size]
        x_prog = x[...,:self.prog_input_size]

        if self.training:
            #in training, estimate the full sequence with the diagnosis module
            if init_state is None:
                #execution with no initial state
                out_diag,_ = self.rnn_diagnosis(x_diag)
                h_init = self.rnn_diagnosis.output_to_hidden(out_diag,self.init_sz-1)
                new_hidden = self.rnn_diagnosis.output_to_hidden(out_diag,-1)

                out_prog,_ = self.rnn_prognosis(x_prog[:,self.init_sz:],h_init)
                out_prog=torch.cat([out_diag[:,:,:self.init_sz],out_prog],2)
            elif self.reset_mask is not None:
                #execution with some sequences reset
                #extract state of non reset diagnosis sequences
                diag_init = self.rnn_diagnosis._get_hidden(bs)
                diag_init_masked = [x[:,~self.reset_mask] for x in diag_init]
                prog_init_masked = [x[:,~self.reset_mask] for x in init_state]
                #diagnosis for init_state of reset sequences
                reset_model_state(self.rnn_diagnosis)
                out_diag_1_res,h_diag_1_res = self.rnn_diagnosis(x_diag[self.reset_mask,:self.init_sz])
                h_prog_1_res = self.rnn_diagnosis.output_to_hidden(out_diag_1_res,-1)
                #diagnosis and prognosis for init_state of non-reset sequences
                out_diag_1_no_res,h_diag_1_no_res = self.rnn_diagnosis(x_diag[~self.reset_mask,:self.init_sz],diag_init_masked)
                out_prog_1_no_res,h_prog_1_no_res = self.rnn_prognosis(x_prog[~self.reset_mask,:self.init_sz],prog_init_masked)
                #merge output of init window
                out_prog_1 = torch.zeros((out_diag_1_res.shape[0],bs,out_diag_1_res.shape[2],out_diag_1_res.shape[3]),
                                         device=out_diag_1_res.device)
                out_prog_1[:,self.reset_mask] = out_diag_1_res
                out_prog_1[:,~self.reset_mask] = out_prog_1_no_res
                #merge masked states for full batch prognosis
                h_diag_1 = self.merge_states_masked(h_diag_1_res,h_diag_1_no_res,diag_init,self.reset_mask)
                h_prog_1 = self.merge_states_masked(h_prog_1_res,h_prog_1_no_res,diag_init,self.reset_mask)

                out_diag,_ = self.rnn_diagnosis(x_diag[:,self.init_sz:],h_diag_1)
                new_hidden = self.rnn_diagnosis.output_to_hidden(out_diag,-1)
                out_prog_2,_ = self.rnn_prognosis(x_prog[:,self.init_sz:],h_prog_1)

                out_prog=torch.cat([out_prog_1,out_prog_2],2)
            else:
                import pdb; pdb.set_trace()
                out_prog,_ = self.rnn_prognosis(x_prog,init_state)
                out_diag,_ = self.rnn_diagnosis(x_diag)
                new_hidden = self.rnn_diagnosis.output_to_hidden(out_diag,-1)
        else:
#             import pdb; pdb.set_trace()
            #in inference, use the diagnosis module only for initial state estimation
            if init_state is None:
                out_init,_ = self.rnn_diagnosis(x_diag[:,:self.init_sz])
                h_init = self.rnn_diagnosis.output_to_hidden(out_init,-1)
                out_prog,new_hidden = self.rnn_prognosis(x_prog[:,self.init_sz:],h_init)
                out_prog=torch.cat([out_init,out_prog],2)
            else:
                out_prog,new_hidden = self.rnn_prognosis(x_prog,init_state)

        self.hidden =  to_detach(new_hidden, cpu=False, gather=False)
        self.reset_mask = None

        #Shared Linear Layer
        result = self.final(out_prog[-1])
        return result

    def _get_hidden(self,bs):
        '''retrieve internal hidden state, check if model device has changed'''
        if self.hidden is None: return None
        if bs!=self.hidden[0].shape[1]: return None
        if self.hidden[0][0].device != one_param(self).device: return None
        return self.hidden

    def reset_state(self):
        self.hidden = None
        self.reset_mask = None

# Cell
from fastai.callback.hook import *
class NarProgCallback(HookCallback):
    "`Callback` that regroups lr adjustment to seq_len, AR and TAR."
    def __init__(self,modules, alpha=1e6,beta=1.0,p_diag_state=0.4,sync_type='mse',narprog_model = None,detach=False, **kwargs):
        super().__init__(modules=modules,detach=detach,**kwargs)
        store_attr('alpha,beta,p_diag_state,sync_type,narprog_model')
        self.clear()

    def clear(self):
        self._out_diag = []
        self._out_prog = []

    def hook(self, m, i, o):
        '''add output of diagnosis and prognosis modules to a list for regularization in after_loss'''
        if 'Diag' in type(m).__name__:
            self._out_diag.insert(0,o[0])
        else:
            self._out_prog.insert(0,o[0])

    def before_batch(self):
        self.clear()
        if not self.training or self.p_diag_state == 1: return


        if self.p_diag_state == 0:
            reset_model_state(self.learn.model)
            return

        model = self.learn.model if self.narprog_model is None else self.narprog_model
        bs = self.xb[0].shape[0]
        hidden_diag = model._get_hidden(bs)
        if not hidden_diag is None:
            model.reset_mask = torch.randn((bs,), device=hidden_diag[0].device) >= self.p_diag_state

    def after_loss(self):
        if not self.training: return

        for diag,prog in zip(self._out_diag,self._out_prog):
#             import pdb; pdb.set_trace()

            if diag.shape != prog.shape:
                if diag.shape[2] > prog.shape[2]:
                    diag = diag[:,:,-prog.shape[2]:]
                else:
                    continue

            if self.sync_type == 'mse':
                hidden_loss = ((prog-diag)/
                               (prog.norm()+diag.norm())).pow(2).mean()
                self.learn.loss_grad += self.alpha * hidden_loss
                self.learn.loss += self.alpha * hidden_loss
            elif self.sync_type == 'mae':
                hidden_loss = ((prog-diag)/
                               (prog.norm()+diag.norm())).abs().mean()
                self.learn.loss_grad += self.alpha * hidden_loss
                self.learn.loss += self.alpha * hidden_loss
            elif self.sync_type == 'mspe':
                hidden_loss = ((diag-prog)/torch.linalg.norm(diag,dim=(0,1,2))).pow(2).mean()
                self.learn.loss_grad += self.alpha * hidden_loss
                self.learn.loss += self.alpha * hidden_loss
            elif self.sync_type == 'mape':
                hidden_loss = ((diag-prog)/torch.linalg.norm(diag,dim=(0,1,2))).abs().mean()
                self.learn.loss_grad += self.alpha * hidden_loss
                self.learn.loss += self.alpha * hidden_loss

            #check equal batchsize
            if diag.shape[1] == self.yb[0].shape[0]:
                model = self.learn.model if self.narprog_model is None else self.narprog_model
                y_diag = model.final(diag[-1])
                self.learn.loss_grad += self.beta*self.learn.loss_func(y_diag,self.yb[0][:,-y_diag.shape[1]:])

        self.clear()


# Cell
class NarProgCallback_variable_init(Callback):
    "`Callback` reports progress after every epoch to the ray tune logger"

    def __init__(self,init_sz_min,init_sz_max,**kwargs):
        super().__init__(**kwargs)
        self.init_sz_valid = None
        self.init_sz_min = init_sz_min
        self.init_sz_max = init_sz_max

    def before_batch(self):
        if hasattr(self.learn.model,'init_sz'):
            if self.init_sz_valid is None: self.init_sz_valid = self.learn.model.init_sz
            if self.training:
                self.learn.model.init_sz = np.random.randint(self.init_sz_min,self.init_sz_max+1)
            else:
                self.learn.model.init_sz = self.init_sz_valid

# Cell
class ProDiagTrainer(Callback):
    "`Callback` that regroups lr adjustment to seq_len, AR and TAR."
    def __init__(self, alpha=1e6,beta=1,p_own_state=0):
        store_attr('alpha,beta,p_own_state')
        self.main_init_prop = None

    def _has_main_init(self):
        return hasattr(self.learn.model,'main_init_prop')

    def before_fit(self):
        if self._has_main_init():
            self.main_init_prop=self.learn.model.main_init_prop

    def before_batch(self):
        if not self.training or self.p_own_state == 0: return
        main_init_prop = random.random()< self.p_own_state
        self.learn.model.main_init_prop = main_init_prop

    def after_pred(self):
        p,self.pred_diag,self.est_hidden,self.pred_hidden=self.pred
        self.learn.pred = p

    def after_loss(self):
        if not self.training: return
        self.learn.loss_grad += self.beta*self.learn.loss_func(self.pred_diag,*self.yb)

        hidden_loss = ((self.est_hidden-self.pred_hidden)/
                       (self.est_hidden.norm()+self.pred_hidden.norm())).pow(2).mean()
        self.learn.loss_grad += self.alpha * hidden_loss

    def before_validate(self):
        '''Set Dual RNN to reuse the prediction state after each mini batch on validation'''
        if self._has_main_init():
            self.learn.model.main_init_prop = True

    def after_validate(self):
        '''Reset Dual RNN to training state propagation behaviour'''
        if self._has_main_init():
            self.learn.model.main_init_prop=self.main_init_prop


    def after_fit(self):
        reset_model_state(self.learn.model)

# Cell
class DualRNN(nn.Module):

    @delegates(RNN, keep=True)
    def __init__(self,main_input_size,co_input_size,output_size,init_sz=100,hidden_size=100,
                 rnn_layer=1,linear_layer = 1,main_init_est = True,main_init_prop = True,**kwargs):
        super().__init__()
        store_attr('main_input_size,co_input_size,main_init_est,main_init_prop,init_sz')

        rnn_kwargs = dict(hidden_size=hidden_size,num_layers=rnn_layer,stateful=True,ret_full_hidden=True)
        rnn_kwargs = dict(rnn_kwargs, **kwargs)

        self.co_rnn = RNN(co_input_size,**rnn_kwargs)
        self.main_rnn = RNN(main_input_size,**rnn_kwargs)

#         self.co_estimator = SeqLinear(hidden_size,output_size,hidden_layer=linear_layer)
        self.main_estimator = SeqLinear(hidden_size,output_size,hidden_layer=linear_layer)

    def forward(self, x,init_state = None):
        bs = x.shape[0]
        if init_state is None:
            init_state = self.main_rnn._get_hidden(bs) if self.main_init_prop else self.co_rnn._get_hidden(bs)


        x_co = x[...,:self.co_input_size]
        x_main = x[...,:self.main_input_size]

        #RNN Layer
        if init_state is None:
#             import pdb; pdb.set_trace()
            if self.main_init_est:
                out_init,h_init = self.main_rnn(x_main[:,:self.init_sz])
                out_main,_ = self.main_rnn(x_main[:,self.init_sz:],h_init)
                out_co,_ = self.co_rnn(x_co[:,self.init_sz:],h_init)
                out_main=torch.cat([out_init,out_main],2)
                out_co=torch.cat([out_init,out_co],2)
            else:
                out_init,h_init = self.co_rnn(x_co[:,:self.init_sz])
                out_co,_ = self.co_rnn(x_co[:,self.init_sz:],h_init)
                out_main,_ = self.main_rnn(x_main[:,self.init_sz:],h_init)
                out_main=torch.cat([out_init,out_main],2)
                out_co=torch.cat([out_init,out_co],2)
        else:
            out_co,_ = self.co_rnn(x_co,init_state)
            out_main,_ = self.main_rnn(x_main,init_state)


#         import pdb; pdb.set_trace()

        #Shared Linear Layer
        est_co = self.main_estimator(out_co[-1])
        est_main = self.main_estimator(out_main[-1])

#         import pdb; pdb.set_trace()
        return est_main,est_co, out_co,out_main

# Cell
class DualCRNN(nn.Module):

    @delegates(RNN, keep=True)
    def __init__(self,main_input_size,co_input_size,output_size,init_sz=100,tcn_hidden_size=100,tcn_layer=8,rnn_hidden_size=100,
                 rnn_layer=1,linear_layer = 1,main_init_est = True,main_init_prop = True,**kwargs):
        super().__init__()
        store_attr('main_input_size,co_input_size,main_init_est,main_init_prop,init_sz')

        rnn_kwargs = dict(hidden_size=rnn_hidden_size,num_layers=rnn_layer,stateful=True,ret_full_hidden=True)
        rnn_kwargs = dict(rnn_kwargs, **kwargs)

        self.co_tcn = TCN(co_input_size,rnn_hidden_size,tcn_layer,tcn_hidden_size,stateful=True)
        self.main_tcn = TCN(main_input_size,rnn_hidden_size,tcn_layer,tcn_hidden_size,stateful=True)

        self.co_rnn = RNN(rnn_hidden_size,**rnn_kwargs)
        self.main_rnn = RNN(rnn_hidden_size,**rnn_kwargs)

#         self.co_estimator = SeqLinear(rnn_hidden_size,output_size,hidden_layer=linear_layer)
        self.main_estimator = SeqLinear(rnn_hidden_size,output_size,hidden_layer=linear_layer)

    def forward(self, x,init_state = None):
        bs = x.shape[0]
        if init_state is None:
            init_state = self.main_rnn._get_hidden(bs) if self.main_init_prop else self.co_rnn._get_hidden(bs)


        x_co = x[...,:self.co_input_size]
        x_main = x[...,:self.main_input_size]

        #TCN Layer
        x_co = self.co_tcn(x_co)
        x_main = self.main_tcn(x_main)


        #RNN Layer
        if init_state is None:
#             import pdb; pdb.set_trace()
            if self.main_init_est:
                out_init,h_init = self.main_rnn(x_main[:,:self.init_sz])
                out_main,_ = self.main_rnn(x_main[:,self.init_sz:],h_init)
                out_co,_ = self.co_rnn(x_co[:,self.init_sz:],h_init)
                out_main=torch.cat([out_init,out_main],2)
                out_co=torch.cat([out_init,out_co],2)
            else:
                out_init,h_init = self.co_rnn(x_co[:,:self.init_sz])
                out_co,_ = self.co_rnn(x_co[:,self.init_sz:],h_init)
                out_main,_ = self.main_rnn(x_main[:,self.init_sz:],h_init)
                out_main=torch.cat([out_init,out_main],2)
                out_co=torch.cat([out_init,out_co],2)
        else:
            out_co,_ = self.co_rnn(x_co,init_state)
            out_main,_ = self.main_rnn(x_main,init_state)


#         import pdb; pdb.set_trace()

        #Shared Linear Layer
        est_co = self.main_estimator(out_co[-1])
        est_main = self.main_estimator(out_main[-1])

#         import pdb; pdb.set_trace()
        return est_main,est_co, out_co,out_main

    def get_main_crnn(self):
        crnn_model = CRNN(1,1)
        crnn_model.cnn = self.main_tcn

        simple_rnn_model = SimpleRNN(1,1)
        simple_rnn_model.rnn = self.main_rnn
        simple_rnn_model.final = self.main_estimator
        crnn_model.rnn = simple_rnn_model
        return crnn_model


    def get_co_crnn(self):
        crnn_model = CRNN(1,1)
        crnn_model.cnn = self.co_tcn

        simple_rnn_model = SimpleRNN(1,1)
        simple_rnn_model.rnn = self.co_rnn
        simple_rnn_model.final = self.main_estimator
        crnn_model.rnn = simple_rnn_model
        return crnn_model