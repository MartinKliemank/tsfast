#AUTOGENERATED! DO NOT EDIT! File to edit: dev/01_model.ipynb (unless otherwise specified).

__all__ = ['SeqLinear', 'RNN', 'SimpleRNN', 'SeperateRNN', 'CausalConv1d', 'CConv1D', 'TCN_Block', 'TCN', 'SeperateTCN',
           'CRNN', 'SeperateCRNN', 'Normalizer1D', 'AR_Model', 'AR_RNN']

#Cell
from .core import *
from fastai2.basics import *
from fastai2.callback.progress import *
from fastai2.text.models.qrnn import *
from torch.nn.utils import weight_norm

#Cell
class SeqLinear(nn.Module):

    def __init__(self,input_size,output_size,hidden_size=100,hidden_layer=1,act=Mish):
        super().__init__()
        def conv_act(inp,out): return nn.Sequential(nn.Conv1d(inp,out,1),act())

        if hidden_layer < 1:
            self.lin = nn.Conv1d(input_size,output_size,1)
        else:
            self.lin = nn.Sequential(conv_act(input_size,hidden_size),
                                     *[conv_act(hidden_size,hidden_size) for _ in range(hidden_layer-1)],
                                    nn.Conv1d(hidden_size,output_size,1))

    def forward(self, x):
        out = x.transpose(1,2)
        out = self.lin(out)
        return out.transpose(1,2)

#Cell
from fastai2.text.models.awdlstm import *
class RNN(nn.Module):
    "inspired by https://arxiv.org/abs/1708.02182"

    def __init__(self, input_size,hidden_size, num_layers,
                 hidden_p=0.0, input_p=0.0, weight_p=0.0,
                 rnn_type='gru',ret_full_hidden=False,stateful=False,
                 normalize=False,residual=False,**kwargs):
        super().__init__()
        store_attr(self, 'ret_full_hidden,num_layers,rnn_type,hidden_size,stateful,input_p,normalize,residual')
        self.bs = 1
        self.rnns = nn.ModuleList([self._one_rnn(input_size if l == 0 else hidden_size,
                                                 hidden_size,weight_p,rnn_type,**kwargs) for l in range(num_layers)])

        self.res_gate0 = nn.Conv1d(input_size,hidden_size,1) if input_size != hidden_size else None

        self.input_dp = RNNDropout(input_p)
        self.hidden_dps = nn.ModuleList([RNNDropout(hidden_p) for l in range(num_layers)])
        self.norm_layers = nn.ModuleList([nn.LayerNorm(hidden_size) for l in range(num_layers)])
        self.reset()

    def forward(self, inp, h_init=None):
        bs = inp.shape[0]
        if h_init is None and self.stateful: h_init = self._get_hidden(bs)

        r_input = self.input_dp(inp) if self.input_p > 0 else inp
        full_hid,new_hidden = [],[]
#         import pdb; pdb.set_trace()
        for l, (rnn,hid_dp,nrm) in enumerate(zip(self.rnns,self.hidden_dps,self.norm_layers)):
            r_output, h = rnn(r_input,h_init[l] if h_init is not None else None)

            #residual connenction
            if self.residual:
                if l == 0 and self.res_gate0 is not None: r_input = self.res_gate0(r_input.transpose(1,2)).transpose(1,2)
                r_output = r_input + r_output

            if self.normalize: r_output = nrm(r_output)
            if l != self.num_layers - 1:
                r_output = hid_dp(r_output)

            full_hid.append(r_output)
            new_hidden.append(h)
            r_input = r_output

        self.hidden =  to_detach(new_hidden, cpu=False, gather=False)
        self.bs = bs
        output = r_output if not self.ret_full_hidden else torch.stack(full_hid, 0)

        return output, new_hidden

    def _get_hidden(self,bs):
        '''retrieve internal hidden state, check if model device has changed'''
        if self.hidden is None: return None
        if bs!=self.bs: return None
        if self.hidden[0][0].device != one_param(self).device: return None
#         import pdb; pdb.set_trace()
        return self.hidden

    def _one_rnn(self, n_in, n_out, weight_p, rnn_type,**kwargs):
        "Return one of the inner rnn"
        if rnn_type == 'gru':
            rnn = nn.GRU(n_in, n_out,1,batch_first=True,**kwargs)
            rnn = WeightDropout(rnn,weight_p)
        elif rnn_type == 'lstm':
            rnn = nn.LSTM(n_in, n_out,1,batch_first=True,**kwargs)
            rnn = WeightDropout(rnn,weight_p)
        elif rnn_type == 'rnn':
            rnn = nn.RNN(n_in, n_out,1,batch_first=True,**kwargs)
            rnn = WeightDropout(rnn,weight_p)
        elif rnn_type == 'qrnn':
            rnn = QRNN(n_in, n_out,1,batch_first=True,**kwargs)
            rnn.layers[0].linear = WeightDropout(rnn.layers[0].linear,weight_p,layer_names='weight')
        else:
            raise Exception
        return rnn

    def reset(self):
        "Reset the hidden states"
        [r.reset() for r in self.rnns if hasattr(r, 'reset')]
        self.hidden = None

#Cell
class SimpleRNN(nn.Module):

    @delegates(RNN, keep=True)
    def __init__(self,input_size,output_size,num_layers=1,hidden_size=100,lrn_init=False,**kwargs):
        super().__init__()
        self.rnn = RNN(input_size=input_size,hidden_size=hidden_size,num_layers=num_layers,**kwargs)
        self.final = SeqLinear(hidden_size,output_size,hidden_size=hidden_size)

        self.init_p = (nn.ParameterList([nn.Parameter(torch.randn(size=(1,1,hidden_size)),requires_grad=True)
                        for f in range(num_layers)]) if lrn_init else None)
        self.reset_flag = False
    def forward(self, x):
        if self.init_p is None or not self.reset_flag:
            h_init = None
        else:
#             import pdb; pdb.set_trace()
            h_init = [p.repeat((1,x.shape[0],1)) for p in self.init_p]
            self.reset_flag = False

        out,_ = self.rnn(x,h_init)
        out = self.final(out)
        return out
    def reset(self):
        self.rnn.reset()
        self.reset_flag = True

#Cell
class SeperateRNN(nn.Module):

    @delegates(RNN, keep=True)
    def __init__(self,input_list,output_size,num_layers=1,hidden_size=100,residual=False,**kwargs):
        super().__init__()
        self.input_list =np.cumsum([0] + input_list)
        rnn_width = hidden_size//len(input_list)

        self.rnns =nn.ModuleList([ RNN(input_size=n,hidden_size=rnn_width,num_layers=1,residual=False,**kwargs)
                        for n in input_list])

        self.rnn =RNN(input_size=rnn_width*len(input_list),hidden_size=hidden_size,
                      num_layers=num_layers,residual=residual,**kwargs)
        self.final = SeqLinear(hidden_size,output_size,hidden_size=hidden_size,hidden_layer=3)

    def forward(self, x):
        rnn_out = [rnn(x[...,self.input_list[i]:self.input_list[i+1]])[0]
                   for i,rnn in enumerate(self.rnns)]
        out = torch.cat(rnn_out,dim=-1)
        out,_ = self.rnn(out)
        out = self.final(out)
        return out
    def reset(self):
        for r in self.rnns:
            r.reset()
        self.rnn.reset()

#Cell
class CausalConv1d(torch.nn.Conv1d):
    def __init__(self,
                 in_channels,
                 out_channels,
                 kernel_size,
                 stride=1,
                 dilation=1,
                 groups=1,
                 bias=True):

        super().__init__(
            in_channels,
            out_channels,
            kernel_size=kernel_size,
            stride=stride,
            padding=(kernel_size - 1) * dilation,
            dilation=dilation,
            groups=groups,
            bias=bias)
        self.__padding = (kernel_size - 1) * dilation

    def forward(self, input):
        return super().forward(input)[:,:,:-self.__padding]

#Cell
@delegates(CausalConv1d, keep=True)
def CConv1D(input_size,output_size,kernel_size=2,activation = Mish,wn=True, bn = False, **kwargs):
    conv = CausalConv1d(input_size,output_size,kernel_size,**kwargs)
    if wn: conv = weight_norm(conv)
    act = activation() if activation is not None else None
    bn = nn.BatchNorm1d(input_size) if bn else None
    m = [m for m in [bn,conv,act] if m is not None]
    return nn.Sequential(*m)

#Cell
@delegates(CausalConv1d, keep=True)
class TCN_Block(nn.Module):
    def __init__(self,input_size,output_size,num_layers=1,
                 activation = Mish,wn=True, bn = False, **kwargs):
        super().__init__()

        layers=[]
        for _ in range(num_layers):
            conv = CausalConv1d(input_size,output_size,2,**kwargs)
            if wn: conv = weight_norm(conv)
            act = activation() if activation is not None else None
            bn = nn.BatchNorm1d(input_size) if bn else None
            layers += [m for m in [bn,conv,act] if m is not None]

        self.layers = nn.Sequential(*layers)

        self.residual = nn.Conv1d(input_size,output_size,kernel_size=1) if output_size!=input_size else None

    def forward(self, x):
        out = self.layers(x)
        out = out + (x if self.residual is None else self.residual(x))
        return out

#Cell
class TCN(nn.Module):
    def __init__(self,input_size,output_size,hl_depth=1,hl_width=10,act = Mish,bn=False,stateful=False):
        super().__init__()

        conv_layers = [TCN_Block(input_size if i==0 else hl_width,hl_width,
                                      dilation=2**(i),bn=bn,activation=act)
                                          for i in range(hl_depth)]
        self.conv_layers = nn.Sequential(*conv_layers)


        self.rec_field = (2**hl_depth)-1
        self.final = nn.Conv1d(hl_width,output_size,kernel_size=1)
        self.x_init = None
        self.stateful = stateful

    def forward(self, x):
        if self.x_init is not None:
            if self.x_init.shape[0] != x.shape[0]:
                self.x_init = None
            elif self.stateful:
                x = torch.cat([self.x_init,x],dim=1)

        x_in = x.transpose(1,2)
        out = self.conv_layers(x_in)
        out = self.final(out).transpose(1,2)

        if self.stateful:
            if self.x_init is not None: out = out[:,self.rec_field:]
            self.x_init = x[:,-self.rec_field:]

        return out

    def reset(self):
        self.x_init = None

#Cell
class SeperateTCN(nn.Module):
    def __init__(self,input_list,output_size,hl_depth=1,hl_width=10,act = Mish,bn=False,stateful=False,final_layer=3):
        super().__init__()
        self.input_list =np.cumsum([0] + input_list)

        tcn_width = hl_width//len(input_list)
        layers = [ [TCN_Block(n if i==0 else tcn_width,tcn_width,
                                      dilation=2**(i),bn=bn,activation=act)
                                          for i in range(hl_depth)]
                        for n in input_list]
        self.layers = nn.ModuleList([nn.Sequential(*l) for l in layers])

        self.rec_field = (2**hl_depth)-1
        self.final = SeqLinear(tcn_width*len(input_list),output_size,hidden_size=hl_width,hidden_layer=final_layer)
        self.x_init = None
        self.stateful = stateful

    def forward(self, x):
        if self.x_init is not None:
            if self.x_init.shape[0] != x.shape[0]:
                self.x_init = None
            elif self.stateful:
                x = torch.cat([self.x_init,x],dim=1)

        tcn_out = [layer(x[...,self.input_list[i]:self.input_list[i+1]].transpose(1,2))
                   for i,layer in enumerate(self.layers)]
        out = torch.cat(tcn_out,dim=1).transpose(1,2)

        out = self.final(out)

        if self.stateful:
            if self.x_init is not None: out = out[:,self.rec_field:]
            self.x_init = x[:,-self.rec_field:]

        return out

    def reset(self):
        self.x_init = None

#Cell
class CRNN(nn.Module):
    def __init__(self,input_size,output_size,num_ft=10,num_cnn_layers=4,num_rnn_layers=2,hs_cnn=10,hs_rnn=10,
         hidden_p=0, input_p=0, weight_p=0, rnn_type='gru',stateful=True,residual=True):
        super().__init__()
        self.cnn = TCN(input_size,num_ft,num_cnn_layers,hs_cnn,act=nn.ReLU,stateful=stateful)
        self.rnn = SimpleRNN(num_ft,output_size,num_layers=num_rnn_layers,hidden_size=hs_rnn,
                       hidden_p=hidden_p, input_p=input_p, weight_p=weight_p,
                        rnn_type=rnn_type,stateful=stateful,residual=residual)

    def forward(self, x):
        return self.rnn(self.cnn(x))

    def reset(self):
        self.cnn.reset()
        self.rnn.reset()

#Cell
class SeperateCRNN(nn.Module):
    def __init__(self,input_list,output_size,num_ft=10,num_cnn_layers=4,num_rnn_layers=2,hs_cnn=10,hs_rnn=10,
         hidden_p=0, input_p=0, weight_p=0, rnn_type='gru',stateful=True,residual=True):
        super().__init__()
        self.cnn = SeperateTCN(input_list,num_ft,num_cnn_layers,hs_cnn,act=nn.ReLU,stateful=stateful,final_layer=0)
        self.rnn = SimpleRNN(num_ft,output_size,num_layers=num_rnn_layers,hidden_size=hs_rnn,
                       hidden_p=hidden_p, input_p=input_p, weight_p=weight_p,
                        rnn_type=rnn_type,stateful=stateful,residual=residual)

    def forward(self, x):
        return self.rnn(self.cnn(x))

    def reset(self):
        self.cnn.reset()
        self.rnn.reset()

#Cell
class Normalizer1D(nn.Module):
    _epsilon = 1e-16

    def __init__(self, mean, std):
        super(Normalizer1D, self).__init__()
        self.register_buffer('std', std.clone().detach() + self._epsilon)
        self.register_buffer('mean', mean.clone().detach())

    def normalize(self, x):
        return (x-self.mean)/self.std

    def unnormalize(self, x):
        return x*self.std + self.mean

#Cell
class AR_Model(nn.Module):
    def __init__(self,model,ar=True,rf=1,hs=False):
        super().__init__()
        self.model = model
        self.ar = ar
        self.rf = rf
        self.hs = hs
        self.norm = None

    def init_normalize(self, batch,axes = [0,1]):
        x = batch[1]
        mean = x.mean(axes, keepdim=True)
        std = x.std(axes, keepdim=True)
        self.norm = Normalizer1D(mean,std)

    def forward(self, u,y):
        if self.ar:
            y_e = torch.zeros_like(y)
            hs = None
            for i in range(y_e.shape[1]):
                if i < self.rf:
                    y_in = F.pad(y_e[:, :i], [0,0,self.rf-i, 0])
                    u_in = F.pad(u[:, :i+1], [0,0,self.rf-i-1, 0])
                else:
                    y_in = y_e[:, i-self.rf:i]
                    u_in = u[:, i-self.rf+1:i+1]

                if self.norm is not None: y_in=self.norm.normalize(y_in)

                x = torch.cat((u_in, y_in), 2)

                if self.hs:
                    y_next,hs = self.model(x,hs)
                else:
                    y_next = self.model(x)
                y_e[:, i] = y_next[:, -1]
            return y_e
        else:
            y_in = F.pad(y[:,:-1,:],[0,0,1,0])

            if self.norm is not None: y_in=self.norm.normalize(y_in)

            x = torch.cat([u,y_in],dim=2)
            if self.hs:
                y_e,_ = self.model(x)
            else:
                y_e = self.model(x)
            return y_e

#Cell
@delegates(RNN, keep=True)
class AR_RNN(nn.Module):
    def __init__(self,input_size,output_size,num_layers=1,hidden_size=100,**kwargs):
        super().__init__()
        self.rnn = RNN(input_size=input_size,hidden_size=hidden_size,num_layers=num_layers,**kwargs)
        self.final = nn.Conv1d(hidden_size,output_size,kernel_size=1)

    def forward(self, x,init_state=None):
#         out = x.transpose(1,2)
        out,hs = self.rnn(x,init_state)
#         import pdb; pdb.set_trace()
        out = out.transpose(1,2)
        out = self.final(out)
        out = out.transpose(1,2)
        return out,hs