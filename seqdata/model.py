#AUTOGENERATED! DO NOT EDIT! File to edit: dev/01_model.ipynb (unless otherwise specified).

__all__ = ['SeqLinear', 'RNN', 'SimpleRNN', 'SimpleGRU', 'SimpleLSTM', 'SimpleQRNN', 'CausalConv1d', 'CConv1D', 'TCN',
           'ConvGRU', 'ConvQRNN', 'Normalizer1D', 'AR_Model', 'AR_GRU']

#Cell
from .core import *
from fastai2.basics import *
from fastai2.callback.progress import *
from fastai2.text.models.qrnn import *

#Cell
class SeqLinear(nn.Module):

    def __init__(self,input_size,output_size,hidden_size=100,hidden_layer=1,act=Mish):
        super().__init__()
        def conv_act(inp,out): return nn.Sequential(nn.Conv1d(inp,out,1),act())

        if hidden_layer < 1:
            self.lin = nn.Conv1d(input_size,output_size,1)
        else:
            self.lin = nn.Sequential(conv_act(input_size,hidden_size),
                                     *[conv_act(hidden_size,hidden_size) for _ in range(hidden_layer-1)],
                                    nn.Conv1d(hidden_size,output_size,1))

    def forward(self, x):
        out = x.transpose(1,2)
        out = self.lin(out)
        return out.transpose(1,2)

#Cell
class RNN(nn.Module):
    def __init__(self,input_size,hidden_size=100,num_layers=1,dropout=0,batch_first=True,rnn='gru',ret_full_hidden=False):
        super().__init__()
        self.dropout = dropout
        self.ret_full_hidden = ret_full_hidden
        self.rnn = rnn
        if rnn == 'gru':
            kwargs = dict(batch_first=batch_first, num_layers=1)
            self.layers = nn.ModuleList([nn.GRU(input_size if l == 0 else hidden_size, hidden_size, **kwargs)
                                     for l in range(num_layers)])
        elif rnn == 'qrnn':
            kwargs = dict(batch_first=batch_first, window=1)
            self.layers = nn.ModuleList([QRNNLayer(input_size if l == 0 else hidden_size, hidden_size, **kwargs)
                                     for l in range(num_layers)])
        else:
            raise Exception

    def forward(self, inp, hid=None):
        new_hid = []
        for i, layer in enumerate(self.layers):
            inp, h = layer(inp, None if hid is None else (hid[i] if self.rnn=='qrnn' else hid[i:i+1]).contiguous())
            new_hid.append(inp if self.ret_full_hidden else h)
            if self.dropout != 0 and i < len(self.layers) - 1:
                for o in [inp]:
                    o = F.dropout(o, p=self.dropout, training=self.training, inplace=False)
        return inp, torch.stack(new_hid, 0)

#Cell
class SimpleRNN(nn.Module):

    @delegates(RNN, keep=True)
    def __init__(self,input_size,output_size,num_layers=1,hidden_size=100,lrn_init_state=False,**kwargs):
        super().__init__()
        self.rnn = RNN(input_size=input_size,hidden_size=hidden_size,num_layers=num_layers,**kwargs)
        self.final = nn.Conv1d(hidden_size,output_size,kernel_size=1)

        self.init_p = nn.Parameter(torch.ones(size=(num_layers,hidden_size))) if lrn_init_state else None

    def forward(self, x):
        if self.init_p is None:
            out,_ = self.rnn(x)
        else:
            out,_ = self.rnn(x,self.init_p.expand((x.shape[0],-1,-1)).transpose(0,1).contiguous())
#         import pdb; pdb.set_trace()
        out = out.transpose(1,2)
        out = self.final(out)
        out = out.transpose(1,2)
        return out

#Cell
class SimpleGRU(nn.Module):
    def __init__(self,input_size,output_size,num_layers=1,hidden_size=100,lrn_init_state=False,**kwargs):
        super().__init__()
        self.rnn = nn.GRU(input_size=input_size,hidden_size=hidden_size,num_layers=num_layers,batch_first=True,**kwargs)
        self.final = nn.Conv1d(hidden_size,output_size,kernel_size=1)

        self.init_p = nn.Parameter(torch.ones(size=(num_layers,hidden_size))) if lrn_init_state else None

    def forward(self, x):
#         out = x.transpose(1,2)
        if self.init_p is None:
            out,_ = self.rnn(x)
        else:
            out,_ = self.rnn(x,self.init_p.expand((x.shape[0],-1,-1)).transpose(0,1).contiguous())
#         import pdb; pdb.set_trace()
        out = out.transpose(1,2)
        out = self.final(out)
        out = out.transpose(1,2)
        return out

#Cell
class SimpleLSTM(nn.Module):

    def __init__(self,input_size,output_size,num_layers=1,hidden_size=100,**kwargs):
        super().__init__()
        self.rnn = nn.LSTM(input_size=input_size,hidden_size=hidden_size,num_layers=num_layers,batch_first=True,**kwargs)
        self.final = nn.Conv1d(hidden_size,output_size,kernel_size=1)

    def forward(self, x):
        out,_ = self.rnn(x)
        out = out.transpose(1,2)
        out = self.final(out)
        out = out.transpose(1,2)
        return out

#Cell
class SimpleQRNN(nn.Module):
    @delegates(QRNN, keep=True)
    def __init__(self,input_size,output_size,hidden_size=100,**kwargs):
        super().__init__()
        self.rnn = QRNN(input_size=input_size,hidden_size=hidden_size,**kwargs)
        self.final = nn.Conv1d(hidden_size,output_size,kernel_size=1)

    def forward(self, x):
        out,_ = self.rnn(x)
#         import pdb; pdb.set_trace()
        out = out.transpose(1,2)
        out = self.final(out)
        out = out.transpose(1,2)
        return out

#Cell
class CausalConv1d(torch.nn.Conv1d):
    def __init__(self,
                 in_channels,
                 out_channels,
                 kernel_size,
                 stride=1,
                 dilation=1,
                 groups=1,
                 bias=True):

        super().__init__(
            in_channels,
            out_channels,
            kernel_size=kernel_size,
            stride=stride,
            padding=(kernel_size - 1) * dilation,
            dilation=dilation,
            groups=groups,
            bias=bias)
        self.__padding = (kernel_size - 1) * dilation

    def forward(self, input):
        return super().forward(input)[:,:,:-self.__padding]

#Cell
@delegates(CausalConv1d, keep=True)
def CConv1D(input_size,output_size,kernel_size=2,activation = Mish, bn = True, **kwargs):
    conv = CausalConv1d(input_size,output_size,kernel_size,**kwargs)
    if bn:
        return nn.Sequential(nn.BatchNorm1d(input_size,eps=1e-3, momentum=0.01),conv,activation())
    else:
        return nn.Sequential(conv,activation())

#Cell
class TCN(nn.Module):
    def __init__(self,input_size,output_size,hl_depth=1,hl_width=10,act = Mish):
        super().__init__()


        self.hl_depth = hl_depth

        self.conv1 = CConv1D(input_size,hl_width)
        self.conv_layers = nn.ModuleList([CConv1D(hl_width,hl_width,dilation=2**(i+1)) for i in range(hl_depth-1)])

        self.final = nn.Conv1d(hl_width,output_size,kernel_size=1)

    def forward(self, x):
        out = x.transpose(1,2)
        out = self.conv1(out)
        for i in range(self.hl_depth-1):
            out = self.conv_layers[i](out)+out
#         print(out.shape)
#         print(self.final.in_features)
        out = self.final(out)
        out = out.transpose(1,2)
        return out

#Cell
def ConvGRU(input_size,output_size,num_ft=10,num_cnn_layers=4,num_rnn_layers=1,hs_cnn=10,hs_rnn=100):
    cnn = TCN(input_size,num_ft,hl_depth=num_cnn_layers,hl_width=hs_cnn)
    rnn = SimpleGRU(num_ft,output_size,num_layers=num_rnn_layers,hidden_size=hs_rnn)
    return nn.Sequential(cnn,rnn)

#Cell
def ConvQRNN(input_size,output_size,num_ft=10,num_cnn_layers=4,num_rnn_layers=1,hs_cnn=10,hs_rnn=100):
    cnn = TCN(input_size,num_ft,hl_depth=num_cnn_layers,hl_width=hs_cnn)
    rnn = SimpleQRNN(num_ft,output_size,n_layers=num_rnn_layers,hidden_size=hs_rnn)
    return nn.Sequential(cnn,rnn)

#Cell
class Normalizer1D(nn.Module):
    _epsilon = 1e-16

    def __init__(self, mean, std):
        super(Normalizer1D, self).__init__()
        self.register_buffer('std', std.clone().detach() + self._epsilon)
        self.register_buffer('mean', mean.clone().detach())

    def normalize(self, x):
        return (x-self.mean)/self.std

    def unnormalize(self, x):
        return x*self.std + self.mean

#Cell
class AR_Model(nn.Module):
    def __init__(self,model,ar=True,rf=1,hs=False):
        super().__init__()
        self.model = model
        self.ar = ar
        self.rf = rf
        self.hs = hs
        self.norm = None

    def init_normalize(self, batch,axes = [0,1]):
        x = batch[1]
        mean = x.mean(axes, keepdim=True)
        std = x.std(axes, keepdim=True)
        self.norm = Normalizer1D(mean,std)

    def forward(self, u,y):
        if self.ar:
            y_e = torch.zeros_like(y)
            hs = None
            for i in range(y_e.shape[1]):
                if i < self.rf:
                    y_in = F.pad(y_e[:, :i], [0,0,self.rf-i, 0])
                    u_in = F.pad(u[:, :i+1], [0,0,self.rf-i-1, 0])
                else:
                    y_in = y_e[:, i-self.rf:i]
                    u_in = u[:, i-self.rf+1:i+1]

                if self.norm is not None: y_in=self.norm.normalize(y_in)

                x = torch.cat((u_in, y_in), 2)

                if self.hs:
                    y_next,hs = self.model(x,hs)
                else:
                    y_next = self.model(x)
                y_e[:, i] = y_next[:, -1]
            return y_e
        else:
            y_in = F.pad(y[:,:-1,:],[0,0,1,0])

            if self.norm is not None: y_in=self.norm.normalize(y_in)

            x = torch.cat([u,y_in],dim=2)
            if self.hs:
                y_e,_ = self.model(x)
            else:
                y_e = self.model(x)
            return y_e

#Cell
class AR_GRU(nn.Module):
    def __init__(self,input_size,output_size,num_layers=1,hidden_size=100,**kwargs):
        super().__init__()
        self.rnn = nn.GRU(input_size=input_size,hidden_size=hidden_size,num_layers=num_layers,batch_first=True,**kwargs)
        self.final = nn.Conv1d(hidden_size,output_size,kernel_size=1)

    def forward(self, x,init_state=None):
#         out = x.transpose(1,2)
        out,hs = self.rnn(x,init_state)
#         import pdb; pdb.set_trace()
        out = out.transpose(1,2)
        out = self.final(out)
        out = out.transpose(1,2)
        return out,hs